name: Deploy Frontend to S3 and CloudFront (MVP)

on:
  push:
    branches:
      - main
    paths:
      - 'frontend/**'
  workflow_dispatch:

jobs:
  deploy-frontend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Build NextJS app
        run: npx next build --no-lint
        env:
          NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }}
          NODE_ENV: production

      - name: Export static site (if not using app directory)
        run: |
          if [ -f "next.config.js" ] && grep -q "output: 'export'" next.config.js; then
            echo "Static export already configured in next.config.js"
          elif [ -f "next.config.ts" ] && grep -q "output: 'export'" next.config.ts; then
            echo "Static export already configured in next.config.ts"
          else
            echo "Note: This step not needed with the app directory since Next.js 13+"
          fi

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Prepare files for S3 deployment
        run: |
          if [ -d "out" ]; then
            DEPLOY_DIR="out"
            echo "Using 'out' directory (static export)"
          elif [ -d ".next" ]; then
            DEPLOY_DIR=".next"
            echo "Using '.next' directory (standard Next.js output)"
          else
            echo "Error: Could not find Next.js output directory"
            exit 1
          fi
          echo "DEPLOY_DIR=$DEPLOY_DIR" >> $GITHUB_ENV

          sudo apt-get update && sudo apt-get install -y gzip

          mkdir -p ./deploy-tmp
          cp -R $DEPLOY_DIR/* ./deploy-tmp/

          if [ "$DEPLOY_DIR" = "out" ]; then
            if [ ! -f "./deploy-tmp/index.html" ]; then
              echo "Warning: index.html not found. Creating redirect..."
              echo '<meta http-equiv="refresh" content="0;url=/index">' > ./deploy-tmp/index.html
            fi
          elif [ "$DEPLOY_DIR" = ".next" ]; then
            echo "Creating index.html for CloudFront..."
            echo '<meta http-equiv="refresh" content="0;url=/_next/static/chunks/pages/index.html">' > ./deploy-tmp/index.html
            if [ ! -f "./deploy-tmp/404.html" ]; then
              echo '<meta http-equiv="refresh" content="0;url=/">' > ./deploy-tmp/404.html
            fi
          fi

          # Gzip static assets and keep original filenames
          find ./deploy-tmp -type f \( -name "*.html" -o -name "*.js" -o -name "*.css" -o -name "*.json" -o -name "*.xml" -o -name "*.svg" -o -name "*.txt" \) | while read -r file; do
            gzip -9 "$file"
            mv "$file.gz" "$file"
          done

      - name: Copy files to S3 bucket with correct headers
        run: |
          # Sync all gzipped files with proper headers
          aws s3 sync ./deploy-tmp/ s3://${{ secrets.S3_BUCKET_NAME }}/ \
            --delete \
            --content-encoding gzip \
            --metadata-directive REPLACE \
            --no-guess-mime-type \
            --cache-control "public, max-age=31536000" \
            --exclude "*" \
            --include "*.html" \
            --include "*.js" \
            --include "*.css" \
            --include "*.json" \
            --include "*.xml" \
            --include "*.svg" \
            --include "*.txt"

          # Sync binary (non-gzipped) assets like images/fonts/icons
          aws s3 sync ./deploy-tmp/ s3://${{ secrets.S3_BUCKET_NAME }}/ \
            --exclude "*" \
            --include "*.png" --include "*.jpg" --include "*.jpeg" \
            --include "*.gif" --include "*.ico" \
            --include "*.woff" --include "*.woff2" --include "*.ttf" --include "*.eot" \
            --metadata-directive REPLACE

      - name: Invalidate CloudFront distribution
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} \
            --paths "/*"

      - name: Report deployment status
        run: |
          echo "âœ… Frontend deployed successfully!"
          if [ -n "${{ secrets.CLOUDFRONT_DOMAIN_NAME }}" ]; then
            echo "ðŸ”— CloudFront URL: https://${{ secrets.CLOUDFRONT_DOMAIN_NAME }}/"
          else
            echo "ðŸ”— S3 Website URL: http://${{ secrets.S3_BUCKET_NAME }}.s3-website-${{ secrets.AWS_REGION }}.amazonaws.com/"
          fi
          echo "ðŸ“‚ Deployment directory used: ${{ env.DEPLOY_DIR }}"
          if [ -f ".next/build-manifest.json" ]; then
            echo "ðŸ“¦ Next.js build manifest found."
          fi
